apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'

description = pluginDescription
version = pluginVersion
group = pluginGroup

repositories {
    mavenLocal()
    mavenCentral()
}
task createClassPathManifest {
    ext.outputDir = file("$projectDir/src-gen/test/resources")
    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

clean {
    delete createClassPathManifest.outputDir
}

sourceSets {
    test {
        resources.srcDir files(createClassPathManifest.outputs).singleFile
    }
}
processTestResources.dependsOn createClassPathManifest

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile group: 'org.openclover', name: 'clover', version: cloverVersion
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile gradleTestKit()
}

test {
    testLogging {
        exceptionFormat = "full"
    }
    if (System.getProperty("debug.gradle.runner") != null) {
        // needed mostly for CI when GradleRunner will fail if not run in forked process
        // GradleRunner.setDebug(true) doesn't spawn new process
        jvmArgs(["-Ddebug.gradle.runner=${System.getProperty("debug.gradle.runner")}"])
    }
    jvmArgs(["-DGRADLE_USER_HOME=${gradle.gradleUserHomeDir}"])
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task docsJar(type: Jar) {
    from groovydoc.outputs
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact docsJar {
                classifier "javadoc"
            }
        }
    }
    repositories {
        maven {
            // put target repository here
        }
    }
}

task install() {
    description = 'Installs artifacts to local Maven, calls for publishToMavenLocal task'
    dependsOn test, publishToMavenLocal
}

task publishSnapshot() {
    description = "Publish snapshot artifacts to snapshot repository"
    dependsOn test  //, should depend on a publish snapshot task
}

task publishRelease() {
    description = "Publish release artifacts to repository"
    dependsOn test //, should deped on publish release task
}
